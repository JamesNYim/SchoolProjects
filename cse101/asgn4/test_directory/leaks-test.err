==948== Memcheck, a memory error detector
==948== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==948== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==948== Command: ./ydc
==948== 
==948== 
==948== Process terminating with default action of signal 25 (SIGXFSZ)
==948==    at 0x4BC7C50: write (write.c:26)
==948==    by 0x4B6507B: _IO_file_write@@GLIBC_2.17 (fileops.c:1180)
==948==    by 0x4B6443B: new_do_write (fileops.c:448)
==948==    by 0x4B6611F: _IO_new_do_write (fileops.c:425)
==948==    by 0x4B6611F: _IO_do_write@@GLIBC_2.17 (fileops.c:422)
==948==    by 0x4B65717: _IO_new_file_xsputn (fileops.c:1243)
==948==    by 0x4B65717: _IO_file_xsputn@@GLIBC_2.17 (fileops.c:1196)
==948==    by 0x4B59E6F: fwrite (iofwrite.c:39)
==948==    by 0x49B6257: std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_int<long>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, long) const (in /usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30)
==948==    by 0x49C3267: std::ostream& std::ostream::_M_insert<long>(long) (in /usr/lib/aarch64-linux-gnu/libstdc++.so.6.0.30)
==948==    by 0x10C27F: operator<<(std::ostream&, std::vector<unsigned char, std::allocator<unsigned char> > const&) (ubigint.cpp:26)
==948==    by 0x10D92B: ubigint::print() const (ubigint.cpp:273)
==948==    by 0x112F83: bigint::print() const (bigint.cpp:161)
==948==    by 0x115E03: do_printall(iterstack<bigint, std::vector<bigint, std::allocator<bigint> > >&, char) (main.cpp:60)
==948== 
==948== HEAP SUMMARY:
==948==     in use at exit: 128,976 bytes in 5 blocks
==948==   total heap usage: 80 allocs, 75 frees, 318,614 bytes allocated
==948== 
==948== LEAK SUMMARY:
==948==    definitely lost: 0 bytes in 0 blocks
==948==    indirectly lost: 0 bytes in 0 blocks
==948==      possibly lost: 0 bytes in 0 blocks
==948==    still reachable: 128,976 bytes in 5 blocks
==948==         suppressed: 0 bytes in 0 blocks
==948== Rerun with --leak-check=full to see details of leaked memory
==948== 
==948== For lists of detected and suppressed errors, rerun with: -s
==948== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
